curl --location 'http://localhost:9090/prompt' \
--header 'Content-Type: application/json' \
--data-raw '{"prompt":"Clean up this git diff output to improve readability for humans. Creat a bulleted list: commit 423c0fad759ee8fd262208814cc6ff183b0cbf49Author: Mobe <mo@be.org>Date:   Thu Oct 26 18:08:37 2023 +0200    Response:    [For the changes provided between the <LATEST> tags, I suggest the following commit message: Added mockHttpServer.py for handling HTTP requests. The script listens on a specified route and port, intercepts incoming requests, and returns a predefined response. The response includes a list of choices with their respective index, role, and content. No known issues or limitations at this time.]diff --git a/mockHttpServer.py b/mockHttpServer.pynew file mode 100755index 0000000..e4e9837--- /dev/null+++ b/mockHttpServer.py@@ -0,0 +1,40 @@+#!/usr/bin/env python3++import os+from flask import Flask, request, jsonify++app = Flask(__name__)++# Default is set if no environment variable is found+route_path = os.getenv(ROUTE_PATH, /openai/deployments/gpt35-deployment/chat/completions)+server_port = int(os.getenv(PORT, 7070))++response_body = {+  choices: [+    {+      index: 0,+      message: {+        role: System,+        content: Hello, Im a system message.+      }+    },+    {+      index: 1,+      message: {+        role: User,+        content: Hello, Im a user message.+      }+    }+  ]+}++@app.route(route_path, methods=[POST])+def intercept():+    print(fHeaders: {request.headers})+    print(fBody: {request.get_json(force=True)})  # force=True ensures it will read the json even the content type header is not set correctly++    return jsonify(response_body) +++if __name__ == __main__:+    app.run(host=0.0.0.0, port=server_port)  # host=0.0.0.0 ensures your app is listening on all network interfacescommit 1907630705fff821104b88b6bb7913aa508fb244Author: Mobe <mo@be.org>Date:   Wed Oct 25 13:02:24 2023 +0200    gitcat cmntsdiff --git a/GitCat.zsh b/GitCat.zshindex fe725d9..d30047d 100755--- a/GitCat.zsh+++ b/GitCat.zsh@@ -1,6 +1,37 @@ #!/bin/zsh+#+# This script fetches a list of your code snippets from GitHub+# and searches the phrase you provide, and highlights any matches.+#+# This information includes:+#  the web address of each gist+#  its description+#  the names of any files it contains.+#+#  Example:+#+# ./GitCat.zsh bot+#  https://gist.github.com/kiviuk/a56b98e8e0733a486d43576de22cff25,https://www.youtube.com/watch?v=cutA4MKm9uY&t=12s,How_to_Make_Your_Own_AI_Bot_-_YouTube+#+# dependencies+#  jq+#  a local script that prints your github token+# -TOKEN=$(./GitToken.sh)+# fetch the secret+TOKEN=$($HOME/bin/GitToken.sh)++# Check if TOKEN is empty+if [[ -z $TOKEN ]]; then+  echo Unable to get TOKEN+  exit 1+fi++# Check if search term exists+if [[ -z $1 ]]; then+  echo Usage: $0 <search term>+  exit 1+fi  gists= for NUMBER in {1..3}; do@@ -11,4 +42,4 @@ for NUMBER in {1..3}; do     https://api.github.com/gists?per_page=100&page=$NUMBER); done -echo $gists | jq -r .[] | .html_url as $url | .description as $desc | (.files | to_entries[] | [$url, $desc, .value.filename]) | @csv | grep --color $1+echo $gists | jq -r .[] | .html_url as $url | .description as $desc | (.files | to_entries[] | [$url, $desc, .value.filename]) | @csv | grep -i --color $1diff --git a/YTGist.sh b/YTGist.shindex 6c727d8..768d353 100755--- a/YTGist.sh+++ b/YTGist.sh@@ -1,6 +1,9 @@ #!/usr/bin/env zsh -TOKEN=$(./GitToken.sh)+# Usage: YTGist.sh <comment> <youtube URL>+#        YTGist.sh some random bot video https://youtu.be/cutA4MKm9uY&t=1++TOKEN=$($HOME/bin/GitToken.sh)  # Check that the required number of arguments have been provided if (( $# != 2 )); then@@ -10,7 +13,7 @@ fi  # Assign script arguments to variables comment=$1-youtubeLink=$(echo $2 | sed s///g | sed s/&.*// | ./YoutubeLinkExpander.zsh)+youtubeLink=$(echo $2 | sed s///g | ./YoutubeLinkExpander.zsh)  # Query YouTube to find the title of the video videoTitle=$(echo $youtubeLink | ./FetchPageTitle.zsh)commit b2973797162907233f5a680996c6bcc9f4f15641Author: Mobe <mo@be.org>Date:   Wed Oct 25 12:55:54 2023 +0200    added gitcatdiff --git a/.gitignore b/.gitignoreindex 086bef1..dc5c6b9 100644--- a/.gitignore+++ b/.gitignore@@ -1 +1,2 @@-./GitToken.sh+GitToken.sh+.DS_Storediff --git a/GitCat.zsh b/GitCat.zshnew file mode 100755index 0000000..fe725d9--- /dev/null+++ b/GitCat.zsh@@ -0,0 +1,14 @@+#!/bin/zsh++TOKEN=$(./GitToken.sh)++gists=+for NUMBER in {1..3}; do+    gists=${gists}$(curl -s -L +    -H Accept: application/vnd.github+json +    -H Authorization: Bearer $TOKEN +    -H X-GitHub-Api-Version: 2022-11-28 +    https://api.github.com/gists?per_page=100&page=$NUMBER);+done++echo $gists | jq -r .[] | .html_url as $url | .description as $desc | (.files | to_entries[] | [$url, $desc, .value.filename]) | @csv | grep --color $1commit 0136978a8ed41cc9feb8487d218900bf8abe43c7Author: Mobe <mo@be.org>Date:   Wed Oct 25 11:21:38 2023 +0200    removed tokendiff --git a/.gitignore b/.gitignorenew file mode 100644index 0000000..086bef1--- /dev/null+++ b/.gitignore@@ -0,0 +1 @@+./GitToken.shdiff --git a/YTGist-no-token.sh b/YTGist.shsimilarity index 97%rename from YTGist-no-token.shrename to YTGist.shindex 8b5a76f..6c727d8 100755--- a/YTGist-no-token.sh+++ b/YTGist.sh@@ -1,6 +1,6 @@ #!/usr/bin/env zsh -TOKEN=+TOKEN=$(./GitToken.sh)  # Check that the required number of arguments have been provided if (( $# != 2 )); thencommit eb19d036de4a81bd7f7d4236510a8253173bdb76Author: Mobe <mo@be.org>Date:   Mon Oct 23 23:45:36 2023 +0200    new: imgcatdiff --git a/ImgCat.sh b/ImgCat.shnew file mode 100755index 0000000..79e15b7--- /dev/null+++ b/ImgCat.sh@@ -0,0 +1,242 @@+#!/usr/bin/env bash++set -o pipefail++# tmux requires unrecognized OSC sequences to be wrapped with DCS tmux;+# <sequence> ST, and for all ESCs in <sequence> to be replaced with ESC ESC. It+# only accepts ESC backslash for ST. We use TERM instead of TMUX because TERM+# gets passed through ssh.+function print_osc() {+    if [[ $TERM == screen* || $TERM == tmux* ]]; then+        printf 033Ptmux;033033]+    else+        printf 033]+    fi+}++# More of the tmux workaround described above.+function print_st() {+    if [[ $TERM == screen* || $TERM == tmux* ]]; then+        printf a033+    else+        printf a+    fi+}++function load_version() {+    if [ -z ${IMGCAT_BASE64_VERSION+x} ]; then+        IMGCAT_BASE64_VERSION=$(base64 --version 2>&1)+        export IMGCAT_BASE64_VERSION+    fi+}++function b64_encode() {+    load_version+    if [[ $IMGCAT_BASE64_VERSION =~ GNU ]]; then+        # Disable line wrap+        base64 -w0+    else+        base64+    fi+}++function b64_decode() {+    load_version+    if [[ $IMGCAT_BASE64_VERSION =~ fourmilab ]]; then+        BASE64ARG=-d+    elif [[ $IMGCAT_BASE64_VERSION =~ GNU ]]; then+        BASE64ARG=-di+    else+        BASE64ARG=-D+    fi+    base64 $BASE64ARG+}++# print_image filename inline base64contents print_filename width height preserve_aspect_ratio+#   filename: Filename to convey to client+#   inline: 0 or 1, if set to 1, the file will be displayed inline, otherwise, it will be downloaded+#   base64contents: Base64-encoded contents+#   print_filename: 0 or 1, if set to 1, print the filename after outputting the image+#   width: set output width of the image in character cells, pixels or percent+#   height: set output height of the image in character cells, pixels or percent+#   preserve_aspect_ratio: 0 or 1, if set to 1, fill the specified width and height as much as possible without stretching the image+#   file: Empty string or file type like application/json or .js.+function print_image() {+    print_osc+    printf 1337;File=inline=%s $2+    printf ;size=%d $(printf %s $3 | b64_decode | wc -c)+    [ -n $1 ] && printf ;name=%s $(printf %s $1 | b64_encode)+    [ -n $5 ] && printf ;width=%s $5+    [ -n $6 ] && printf ;height=%s $6+    [ -n $7 ] && printf ;preserveAspectRatio=%s $7+    [ -n $8 ] && printf ;type=%s $8+    printf :%s $3+    print_st+    printf n+    [ $4 == 1 ] && echo $1+    has_image_displayed=t+}++function error() {+    errcho ERROR: $*+}++function errcho() {+    echo $@ >&2+}++function show_help() {+"}'
